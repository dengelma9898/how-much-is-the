# Preisvergleich Admin API Test Collection
# 
# Diese Datei testet die Admin-API f√ºr System-Management, Crawling und Wartung
# Basis-URL: http://127.0.0.1:8002 (Admin API)
# 
# Anweisungen:
# 1. Installiere die "REST Client" Extension in VS Code
# 2. Starte die Admin-API: cd backend && ./start-admin-api.sh
# 3. Klicke auf "Send Request" √ºber jeder HTTP-Anfrage
# 4. ‚ö†Ô∏è VORSICHT: Diese API kann Daten √§ndern und Crawls starten!

@adminBaseUrl = http://127.0.0.1:8002

### ============================================
### HEALTH & INFO ENDPOINTS
### ============================================

### 1. API Root - Grundlegende Informationen
GET {{adminBaseUrl}}/

### 2. Health Check - Status √ºberpr√ºfen
GET {{adminBaseUrl}}/api/v1/health

### 3. OpenAPI Docs (JSON)
GET {{adminBaseUrl}}/openapi.json

### ============================================
### STORE MANAGEMENT (ADMIN)
### ============================================

### 4. Alle verf√ºgbaren Stores auflisten
GET {{adminBaseUrl}}/api/v1/stores

### 5. Standard-Stores initialisieren (Admin)
POST {{adminBaseUrl}}/api/v1/admin/stores/initialize

### ============================================
### SYSTEM MONITORING & OVERVIEW
### ============================================

### 6. System-√úbersicht (Admin Dashboard)
GET {{adminBaseUrl}}/api/v1/admin/system/overview

### 7. Erweiterte System-Monitoring mit Details
GET {{adminBaseUrl}}/api/v1/admin/system/overview

### ============================================
### CRAWLING SYSTEM MANAGEMENT
### ============================================

### 8. Crawl-Status √úbersicht
GET {{adminBaseUrl}}/api/v1/admin/crawl/status/overview

### 9. Manueller Crawl f√ºr Lidl starten
POST {{adminBaseUrl}}/api/v1/admin/crawl/trigger?store_name=Lidl&postal_code=10115

### 10. Manueller Crawl f√ºr Aldi starten
POST {{adminBaseUrl}}/api/v1/admin/crawl/trigger?store_name=Aldi&postal_code=10115

### 11. Manueller Crawl f√ºr alle Stores
POST {{adminBaseUrl}}/api/v1/admin/crawl/trigger?postal_code=10115

### 12. Crawl-Status f√ºr spezifischen Store (Lidl)
GET {{adminBaseUrl}}/api/v1/admin/crawl/store/Lidl/status

### 13. Crawl-Status f√ºr spezifischen Store (Aldi)
GET {{adminBaseUrl}}/api/v1/admin/crawl/store/Aldi/status

### 14. Detaillierter Crawl-Status (verwende crawl_id aus vorherigen Responses)
# Ersetze {crawl_id} mit tats√§chlicher ID aus Response
GET {{adminBaseUrl}}/api/v1/admin/crawl/status/12345678-1234-5678-9abc-123456789abc

### 15. Crawl abbrechen (verwende crawl_id aus vorherigen Responses)
# Ersetze {crawl_id} mit tats√§chlicher ID
DELETE {{adminBaseUrl}}/api/v1/admin/crawl/12345678-1234-5678-9abc-123456789abc

### ============================================
### LEGACY ADMIN ENDPOINTS
### ============================================

### 16. Alter Crawl-Status (Legacy)
GET {{adminBaseUrl}}/api/v1/admin/crawl/status

### ============================================
### DATABASE CLEANUP SYSTEM
### ============================================

### 17. Cleanup-Statistiken anzeigen
GET {{adminBaseUrl}}/api/v1/admin/cleanup/statistics

### 18. Datenbank-Cleanup (Allgemein - Legacy)
POST {{adminBaseUrl}}/api/v1/admin/crawl/cleanup

### 19. Abgelaufene Angebote bereinigen (Dry Run)
POST {{adminBaseUrl}}/api/v1/admin/cleanup/expired?dry_run=true&triggered_by=test_user

### 20. Abgelaufene Angebote bereinigen (REAL - ACHTUNG!)
# POST {{adminBaseUrl}}/api/v1/admin/cleanup/expired?dry_run=false&triggered_by=admin_user

### 21. Alte Produkte bereinigen (Dry Run - 30 Tage)
POST {{adminBaseUrl}}/api/v1/admin/cleanup/old-products?days_old=30&dry_run=true&triggered_by=test_user

### 22. Alte Produkte bereinigen (Dry Run - 60 Tage)
POST {{adminBaseUrl}}/api/v1/admin/cleanup/old-products?days_old=60&dry_run=true&triggered_by=test_user

### 23. Aggressive Bereinigung Test (7 Tage - Nur Dry Run!)
POST {{adminBaseUrl}}/api/v1/admin/cleanup/old-products?days_old=7&dry_run=true&triggered_by=cleanup_test

### ============================================
### CRAWL TESTING SCENARIOS
### ============================================

### 24. Rate Limiting Test - Mehrere Crawls schnell hintereinander
POST {{adminBaseUrl}}/api/v1/admin/crawl/trigger?store_name=Lidl&postal_code=10115

###
POST {{adminBaseUrl}}/api/v1/admin/crawl/trigger?store_name=Lidl&postal_code=10115

### 25. Concurrent Crawl Test - Verschiedene Stores gleichzeitig
POST {{adminBaseUrl}}/api/v1/admin/crawl/trigger?store_name=Lidl&postal_code=10115

###
POST {{adminBaseUrl}}/api/v1/admin/crawl/trigger?store_name=Aldi&postal_code=10115

### 26. Crawl mit verschiedenen Postleitzahlen
POST {{adminBaseUrl}}/api/v1/admin/crawl/trigger?store_name=Lidl&postal_code=80331

###
POST {{adminBaseUrl}}/api/v1/admin/crawl/trigger?store_name=Aldi&postal_code=20095

### ============================================
### ERROR TESTING (ADMIN)
### ============================================

### 27. Ung√ºltiger Store-Name
POST {{adminBaseUrl}}/api/v1/admin/crawl/trigger?store_name=InvalidStore&postal_code=10115

### 28. Fehlende Parameter
POST {{adminBaseUrl}}/api/v1/admin/crawl/trigger

### 29. Ung√ºltige Postleitzahl f√ºr Crawl
POST {{adminBaseUrl}}/api/v1/admin/crawl/trigger?store_name=Lidl&postal_code=invalid

### 30. Cleanup mit ung√ºltigen Parametern
POST {{adminBaseUrl}}/api/v1/admin/cleanup/old-products?days_old=abc&dry_run=true&triggered_by=test

### ============================================
### ADVANCED ADMIN OPERATIONS
### ============================================

### 31. System-Status vor Wartungsarbeiten
GET {{adminBaseUrl}}/api/v1/admin/system/overview

### 32. Store-Statistiken f√ºr alle Stores
GET {{adminBaseUrl}}/api/v1/admin/crawl/store/Lidl/status

###
GET {{adminBaseUrl}}/api/v1/admin/crawl/store/Aldi/status

### 33. Cleanup-Statistiken vor Bereinigung
GET {{adminBaseUrl}}/api/v1/admin/cleanup/statistics

### 34. Crawl-Status-√úbersicht nach Tests
GET {{adminBaseUrl}}/api/v1/admin/crawl/status/overview

### ============================================
### DEVELOPMENT & DEBUGGING
### ============================================

### 35. Store-Initialisierung pr√ºfen
GET {{adminBaseUrl}}/api/v1/stores

### 36. System-Overview f√ºr Debugging
GET {{adminBaseUrl}}/api/v1/admin/system/overview

### 37. Crawl-Logs und Status f√ºr Debugging
GET {{adminBaseUrl}}/api/v1/admin/crawl/status/overview

### ============================================
### PRODUCTION MAINTENANCE WORKFLOWS
### ============================================

### 38. W√∂chentliche Wartung - Schritt 1: Status pr√ºfen
GET {{adminBaseUrl}}/api/v1/admin/system/overview

### 39. W√∂chentliche Wartung - Schritt 2: Cleanup-Stats
GET {{adminBaseUrl}}/api/v1/admin/cleanup/statistics

### 40. W√∂chentliche Wartung - Schritt 3: Dry Run Cleanup
POST {{adminBaseUrl}}/api/v1/admin/cleanup/expired?dry_run=true&triggered_by=weekly_maintenance

### 41. W√∂chentliche Wartung - Schritt 4: Alte Produkte (60 Tage)
POST {{adminBaseUrl}}/api/v1/admin/cleanup/old-products?days_old=60&dry_run=true&triggered_by=weekly_maintenance

### 42. Nach-Wartung Status Check
GET {{adminBaseUrl}}/api/v1/admin/system/overview

### ============================================
### EMERGENCY PROCEDURES
### ============================================

### 43. Notfall: Alle aktiven Crawls pr√ºfen
GET {{adminBaseUrl}}/api/v1/admin/crawl/status/overview

### 44. Notfall: System-Status pr√ºfen
GET {{adminBaseUrl}}/api/v1/admin/system/overview

### 45. Notfall: Spezifischen Crawl abbrechen (ID anpassen!)
# DELETE {{adminBaseUrl}}/api/v1/admin/crawl/EMERGENCY-CRAWL-ID-HERE

### ============================================
### MONITORING & ALERTS
### ============================================

### 46. Performance Monitoring
GET {{adminBaseUrl}}/api/v1/admin/system/overview

### 47. Store Health Check
GET {{adminBaseUrl}}/api/v1/admin/crawl/store/Lidl/status

###
GET {{adminBaseUrl}}/api/v1/admin/crawl/store/Aldi/status

### 48. Database Health via Cleanup Stats
GET {{adminBaseUrl}}/api/v1/admin/cleanup/statistics

### ============================================
### NOTES & WARNINGS
### ============================================

# üö® ADMIN API - WICHTIGE HINWEISE:
# 
# ‚ö†Ô∏è GEF√ÑHRLICHE OPERATIONEN:
# - Crawl-Trigger k√∂nnen echte Store-Crawls starten
# - Cleanup-Operationen ohne dry_run=true l√∂schen Daten
# - Rate Limits beachten: 5 Min zwischen Crawls pro Store
# - Concurrent Crawls belasten System und externe APIs
# 
# üîß Verwendung:
# 
# 1. Starte IMMER mit Health Check: GET /api/v1/health
# 2. Pr√ºfe System-Status: GET /api/v1/admin/system/overview
# 3. Verwende dry_run=true bei allen Cleanup-Tests
# 4. √úberwache Crawl-Status nach dem Triggern
# 5. Beende h√§ngende Crawls mit DELETE /api/v1/admin/crawl/{id}
# 
# üìä Wichtige Endpunkte:
# 
# - /health: API-Status pr√ºfen
# - /admin/system/overview: Vollst√§ndiger System-Status
# - /admin/crawl/status/overview: Alle Crawl-Stati
# - /admin/cleanup/statistics: Datenbank-Gesundheit
# 
# üö® Error Codes:
# 
# - 404: Endpoint nicht gefunden ‚Üí Admin-API l√§uft nicht
# - 409: Conflict ‚Üí Crawl bereits aktiv f√ºr Store
# - 422: Validation Error ‚Üí Parameter fehlen/ung√ºltig
# - 429: Rate Limited ‚Üí Zu viele Requests, 5 Min warten
# - 500: Server Error ‚Üí Backend-Logs pr√ºfen, m√∂gl. Crawler-Problem
# 
# üí° Best Practices:
# 
# - Nie Cleanup ohne dry_run=true in Produktion
# - Crawls nur bei Bedarf triggern (automatischer Scheduler l√§uft)
# - System-Overview regelm√§√üig √ºberwachen
# - Crawl-IDs aus Responses f√ºr Status-Tracking nutzen
# - Bei Problemen: Crawls stoppen, System-Status pr√ºfen
# 
# üîí Sicherheit:
# 
# - Diese API sollte NIE √∂ffentlich zug√§nglich sein
# - Nur f√ºr interne Admin-Tools und Entwicklung
# - Produktive Cleanup-Operationen nur nach Tests
# - Backup vor gro√üen Cleanup-Aktionen 