# Preisvergleich Backend API Test Collection
# 
# Diese Datei kann in VS Code mit der REST Client Extension verwendet werden
# oder in anderen HTTP-Clients wie Postman, Insomnia, etc.
#
# Basis-URL: http://127.0.0.1:8000
# 
# Anweisungen:
# 1. Installiere die "REST Client" Extension in VS Code
# 2. Klicke auf "Send Request" √ºber jeder HTTP-Anfrage
# 3. Passe Parameter nach Bedarf an

@baseUrl = http://127.0.0.1:8000

### ============================================
### HEALTH & INFO ENDPOINTS
### ============================================

### 1. API Root - Grundlegende Informationen
GET {{baseUrl}}/

### 2. Health Check - Status √ºberpr√ºfen
GET {{baseUrl}}/api/v1/health

### 3. OpenAPI Docs (JSON)
GET {{baseUrl}}/openapi.json

### ============================================
### STORE MANAGEMENT
### ============================================

### 4. Alle verf√ºgbaren Stores auflisten
GET {{baseUrl}}/api/v1/stores

### 5. Standard-Stores initialisieren (Admin)
POST {{baseUrl}}/api/v1/admin/stores/initialize

### ============================================
### SEARCH ENDPOINTS
### ============================================

### 6. Produktsuche in der Datenbank
GET {{baseUrl}}/api/v1/search/database?query=Milch&postal_code=10115

### 7. Produktsuche in der Datenbank mit Filtern
GET {{baseUrl}}/api/v1/search/database?query=Bio √Ñpfel&postal_code=10115&store_name=Lidl&min_price=1.0&max_price=5.0

### 8. Vollst√§ndige Produktsuche (Datenbank + Live)
POST {{baseUrl}}/api/v1/search
Content-Type: application/json

{
  "query": "Hafermilch",
  "postal_code": "10115",
  "store_preferences": ["Lidl", "Aldi"],
  "price_filter": {
    "min_price": 0.5,
    "max_price": 3.0
  }
}

### 9. Produktsuche mit erweiterten Filtern
POST {{baseUrl}}/api/v1/search
Content-Type: application/json

{
  "query": "Bio Vollkornbrot",
  "postal_code": "80331",
  "store_preferences": ["Lidl"],
  "price_filter": {
    "min_price": 1.0,
    "max_price": 4.0
  },
  "include_unavailable": false
}

### ============================================
### MANUAL CRAWLING SYSTEM
### ============================================

### 10. System-√úbersicht (Admin Dashboard)
GET {{baseUrl}}/api/v1/admin/system/overview

### 11. Crawl-Status √úbersicht
GET {{baseUrl}}/api/v1/admin/crawl/status/overview

### 12. Manueller Crawl f√ºr Lidl starten
POST {{baseUrl}}/api/v1/admin/crawl/trigger?store_name=Lidl&postal_code=10115

### 13. Manueller Crawl f√ºr Aldi starten
POST {{baseUrl}}/api/v1/admin/crawl/trigger?store_name=Aldi&postal_code=10115

### 14. Manueller Crawl f√ºr alle Stores
POST {{baseUrl}}/api/v1/admin/crawl/trigger?postal_code=10115

### 15. Crawl-Status f√ºr spezifischen Store
GET {{baseUrl}}/api/v1/admin/crawl/store/Lidl/status

### 16. Detaillierter Crawl-Status (verwende crawl_id aus vorherigen Responses)
# Ersetze {crawl_id} mit tats√§chlicher ID aus Response
GET {{baseUrl}}/api/v1/admin/crawl/status/12345678-1234-5678-9abc-123456789abc

### 17. Crawl abbrechen (verwende crawl_id aus vorherigen Responses)
# Ersetze {crawl_id} mit tats√§chlicher ID
DELETE {{baseUrl}}/api/v1/admin/crawl/12345678-1234-5678-9abc-123456789abc

### ============================================
### LEGACY ADMIN ENDPOINTS
### ============================================

### 18. Alter Crawl-Status (Legacy)
GET {{baseUrl}}/api/v1/admin/crawl/status

### 19. Datenbank-Cleanup
POST {{baseUrl}}/api/v1/admin/crawl/cleanup

### ============================================
### TEST SCENARIOS
### ============================================

### 20. Rate Limiting Test - Mehrere Crawls schnell hintereinander
POST {{baseUrl}}/api/v1/admin/crawl/trigger?store_name=Lidl&postal_code=10115

###
POST {{baseUrl}}/api/v1/admin/crawl/trigger?store_name=Lidl&postal_code=10115

### 21. Concurrent Crawl Test - Verschiedene Stores gleichzeitig
POST {{baseUrl}}/api/v1/admin/crawl/trigger?store_name=Lidl&postal_code=10115

###
POST {{baseUrl}}/api/v1/admin/crawl/trigger?store_name=Aldi&postal_code=10115

### 22. Produktsuche mit Umlauten
GET {{baseUrl}}/api/v1/search/database?query=K√§se&postal_code=80331

### 23. Produktsuche mit Leerzeichen
GET {{baseUrl}}/api/v1/search/database?query=Vollkorn%20Brot&postal_code=80331

### ============================================
### ERROR TESTING
### ============================================

### 24. Ung√ºltiger Store-Name
POST {{baseUrl}}/api/v1/admin/crawl/trigger?store_name=InvalidStore&postal_code=10115

### 25. Fehlende Parameter
POST {{baseUrl}}/api/v1/admin/crawl/trigger

### 26. Ung√ºltige Postleitzahl
GET {{baseUrl}}/api/v1/search/database?query=Milch&postal_code=invalid

### 27. Leere Suchanfrage
GET {{baseUrl}}/api/v1/search/database?query=&postal_code=10115

### ============================================
### MONITORING & DEBUGGING
### ============================================

### 28. System-Monitoring mit allen Details
GET {{baseUrl}}/api/v1/admin/system/overview

### 29. Alle aktiven Crawls
GET {{baseUrl}}/api/v1/admin/crawl/status/overview

### 30. Store-spezifische Statistiken
GET {{baseUrl}}/api/v1/admin/crawl/store/Lidl/status

###
GET {{baseUrl}}/api/v1/admin/crawl/store/Aldi/status

### ============================================
### BULK OPERATIONS (Erweiterte Tests)
### ============================================

### 31. Mehrere Suchbegriffe testen
GET {{baseUrl}}/api/v1/search/database?query=Milch&postal_code=10115

###
GET {{baseUrl}}/api/v1/search/database?query=Brot&postal_code=10115

###
GET {{baseUrl}}/api/v1/search/database?query=K√§se&postal_code=10115

###
GET {{baseUrl}}/api/v1/search/database?query=Joghurt&postal_code=10115

### 32. Verschiedene Postleitzahlen testen
GET {{baseUrl}}/api/v1/search/database?query=Hafermilch&postal_code=10115

###
GET {{baseUrl}}/api/v1/search/database?query=Hafermilch&postal_code=80331

###
GET {{baseUrl}}/api/v1/search/database?query=Hafermilch&postal_code=20095

### ============================================
### PERFORMANCE TESTING
### ============================================

### 33. Komplexe Suchanfrage mit vielen Parametern
POST {{baseUrl}}/api/v1/search
Content-Type: application/json

{
  "query": "Bio Vollkorn Haferflocken glutenfrei",
  "postal_code": "10115",
  "store_preferences": ["Lidl", "Aldi"],
  "price_filter": {
    "min_price": 1.0,
    "max_price": 8.0
  },
  "include_unavailable": true
}

### 34. Leere/Minimale Suchanfrage
POST {{baseUrl}}/api/v1/search
Content-Type: application/json

{
  "query": "a",
  "postal_code": "10115"
}

### ============================================
### NOTES & TIPS
### ============================================

# üìù Verwendung:
# 
# 1. VS Code REST Client Extension:
#    - Installiere "REST Client" Extension
#    - √ñffne diese Datei
#    - Klicke "Send Request" √ºber jeder Anfrage
# 
# 2. Postman/Insomnia:
#    - Kopiere einzelne Requests
#    - Passe Base-URL an falls n√∂tig
# 
# 3. curl (Terminal):
#    - Beispiel: curl "http://127.0.0.1:8000/api/v1/health"
# 
# üìä Erwartete Responses:
# 
# - /health: {"status": "healthy", "timestamp": "..."}
# - /stores: [{"id": 1, "name": "Lidl", ...}, ...]
# - /search/database: {"results": [...], "total": N, ...}
# - /admin/crawl/trigger: {"crawl_id": "uuid", "message": "..."}
# 
# üîß Troubleshooting:
# 
# - 404: Endpoint nicht gefunden ‚Üí Backend l√§uft nicht oder falscher Pfad
# - 422: Validation Error ‚Üí Parameter fehlen oder ung√ºltig
# - 429: Rate Limited ‚Üí Zu viele Requests, 5 Min warten
# - 409: Conflict ‚Üí Crawl bereits aktiv f√ºr Store
# - 500: Server Error ‚Üí Backend-Logs pr√ºfen
# 
# üí° Tipps:
# 
# - Starte mit /health um Backend-Status zu pr√ºfen
# - Nutze /admin/system/overview f√ºr vollst√§ndige Systeminfo
# - Crawl-IDs aus Responses f√ºr Status-Tracking verwenden
# - Rate Limiting: 5 Min zwischen Crawls pro Store
# - Concurrent Crawls: Verschiedene Stores parallel m√∂glich

### ============================================
### CLEANUP ENDPOINTS (NEW)
### ============================================

### 35. Cleanup-Statistiken anzeigen
GET {{baseUrl}}/api/v1/admin/cleanup/statistics

### 36. Abgelaufene Angebote bereinigen (Dry Run)
POST {{baseUrl}}/api/v1/admin/cleanup/expired?dry_run=true&triggered_by=test_user

### 37. Abgelaufene Angebote bereinigen (Real)
POST {{baseUrl}}/api/v1/admin/cleanup/expired?dry_run=false&triggered_by=test_user

### 38. Alte Produkte bereinigen (Dry Run - 30 Tage)
POST {{baseUrl}}/api/v1/admin/cleanup/old-products?days_old=30&dry_run=true&triggered_by=test_user

### 39. Alte Produkte bereinigen (Real - 60 Tage)
POST {{baseUrl}}/api/v1/admin/cleanup/old-products?days_old=60&dry_run=false&triggered_by=test_user

### 40. Aggressive Bereinigung (7 Tage)
POST {{baseUrl}}/api/v1/admin/cleanup/old-products?days_old=7&dry_run=true&triggered_by=cleanup_test 